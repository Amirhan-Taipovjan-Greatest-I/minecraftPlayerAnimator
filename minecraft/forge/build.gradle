plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":${project.module_name}:common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        mixinConfig "playerAnimator-common.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    //modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":${project.module_name}:common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":${project.module_name}:common", configuration: "transformProductionForge")) { transitive = false }

    common(shadowCommon(project(path: ":coreLib")) {transitive false}) {transitive false} //Why can I nest these?

    //modImplementation 'io.github.kosmx.bendy-lib:bendy-lib-forge:2.1.0'
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":${project.module_name}:common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

    def apiSources = project(":coreLib").sourcesJar
    dependsOn apiSources
    from apiSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        repositories {

            if (project.keysExists) {
                maven {
                    url = 'https://maven.kosmx.dev/'
                    credentials {
                        username = project.keys.kosmx_maven_user
                        password = project.keys.kosmx_maven
                    }
                }
                maven {
                    name = "GitHubPackages"
                    url = "https://maven.pkg.github.com/kosmx/fabricPlayerAnimation"
                    credentials {
                        username = System.getenv("GITHUB_ACTOR")
                        password = System.getenv("GITHUB_TOKEN")
                    }
                }
            } else {
                mavenLocal()
            }
        }
    }
}
